Entrega Final - Robotica Cognitiva 

1. SLAM (C) 
2. Exploração (C, opcional) 
3. Edição do mapa e especificação da missão (C) 
4. Planeamento de caminhos (O) 
5. Deteção e identificação de imagens de comando (O) 
6. Navegação autónoma (O)

Entrega Intercalar 

1, 3 e 4 -> acho melhor irmos por aqui! 
ou
1, 3, e 5

Passo a Passo: 

1. Simultaneous Localization and Mapping (SLAM) 
objetivo: criar um mapa do ambiente. 

step 1: Desenhar/Configurar o ambinete do Gazebo 
    -desenhar o hotel (cozinha+quartos) 
    roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch (ex para criar um mundo vazio e depois ir adicionando elementos)

step 2: Carregar o robo no ambiente criado
    - robo movel diferencial (provavelmente turtlebot3 
    - verificar como faz isso, se já criamos o ambiante com o robo já incializado (como no ex acima) 
    
step 3: Execução do SLAM 
    - instalar pacote necessários para SLAM (slam_gmapping, hector_slam ou cartographer)
    - roslaunch turtlebot3_slam turtlebot3_slam.launch
    - utlização do Rviz para visualizar a reconstrução em tempo real (adicionar "LaserScan",                "Map" e "RobotModel")
    - ajuste de parametros no rviz
    
step 4: Salvar o mapa
    - rosrun map_server map_saver -f /caminho/para/salvar_o_mapa/meu_mapa
    - .yaml e .pgm

2.Edição do Mapa e Especificação da Missão 
objetivo: corrigir falhas e definir tarefas que o robo deve realizar. 

step 1: Edição do Mapa 
    - ajustes no mapa *depois* do SLAM (correção de falhas, ajustar a reoslução, mesclar) 
    
step 2: Especificação da Missão
    - definição de pontos de interesse (é pra ser definido manualmente?) 
    - ex. localização da despensa, da cozinha, quartos etc 
    - assumindo que é manualmente: 
        - carregar o mapa no rviz
        - obtenção das coordenadas (ao clicar num ponto especifico) 
        - armazena-los
        - adicionar (manualmente) num arquivo de configuração (.yaml) - yaml-cpp
        - o acesso dos dados em C++ é feito no script (adionar as dependencias do CMakeList.txt, compilar o código com catkin_make, e executá-lo com rosrun meu_pacote acessar_pontos_interesse_cpp) 
    
3. Planeamento de Trajetória - *depois olhar isso com mais detalhes*

step 1: configuração do move_base (pacote ROS) 
    - é preciso ajustar os parametro do move_base para definir velocidades etc (.yaml) 

step 2: Configuração de obstauclos 
    - é preciso definir os costmaps etc e tal
    
- o planeamento da trajetória em si é feito com o move_base 
        
